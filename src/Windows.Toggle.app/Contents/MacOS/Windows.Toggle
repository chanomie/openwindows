#!/usr/bin/perl -sw

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/Library";

use Browser::Open qw( open_browser );
use Carp; # carp is warn, confess is exception
use Cwd qw ( cwd realpath );
use Config::JSON; # http://search.cpan.org/~rizen/Config-JSON-1.5202/lib/Config/JSON.pm
use Data::Dumper;
use File::HomeDir;
use File::Spec;
use Growl::GNTP;
use JSON;
use Mac::PropertyList qw(parse_plist_fh create_from_hash);
use LWP::UserAgent;
use POSIX qw(strftime);
use String::Util qw(trim);
use URI;
use vars qw($v $h $l);

=head1 NAME

Windows.Toggle a module to notify when you should open/close your windows.

=head1 SYNOPSIS

We all love fresh air, but not when it gets in the way of the hard work your HVAC 
system is doing.  `Windows.Toggle` watches the settings of your Nest Thermostate and
the local weather sends a Growl notification to let you know when you should be opening
and closing the windows.

  Usage: WindowsToggle [command]
  
=head2 SETUP

You'll need to run the following command lines options after you first download to
setup the local settings.

=over 4

=item Set the Nest Client Secret for the App.

  ./windowstoggle.pl setNestClientSecret [client-secret]

=item Set the Forecast API key

  ./windowstoggle.pl setForecastApiKey [forecast-api-key]

=item Set your Latitude and Longitude to be used by the Forecast API to figure out the 
      local outdoor weather.

  ./windowstoggle.pl setLatLong [lat,long]

=back    

=head2 Other Commands

=over 4

=item Set the current Window State manually

  ./windowstoggle.pl setWindowState [opened/closed]
    
=item Set the Nest Access Token if you want to skip the OAuth process.

  ./windowstoggle.pl setNestAccessToken [access-token]
  
=back

=head1 METHODS

=cut

#### main(@ARGV) ####################################################

=head2 C<main(@ARGV)>

=over 4

=item Input:

=over 4

=item @ARGV

typically the argument list from the command line

=back

=back

=pod

The main function checks for a specific run command and if none is provided will run
a standard loop.

=cut

#####################################################################
sub main(@) {
  my $CONFIG = {};
  my $DATA;
  my $commandString = shift(@ARGV);
  my $userAgent = LWP::UserAgent->new();
  
  ## Initialize the Configuration File
  $DATA = initialize($CONFIG);
  
  $CONFIG->{'LOG-WINDOW-STATE-BEFORE'} = $DATA->{'WINDOW-STATE'};
  $CONFIG->{'LOG-WINDOW-STATE-UPDATED-BEFORE'} = $DATA->{'WINDOW-STATE-UPDATED'};

  if($h) {
    displayHelp();
  
  } elsif(defined($commandString)) {
    if($commandString eq "setNestClientSecret") {
      $DATA->{'NEST-CLIENT-SECRET'} = shift(@ARGV);
    } elsif ($commandString eq "setForecastApiKey") {
      $DATA->{'FORECAST-API-KEY'} = shift(@ARGV);
    } elsif ($commandString eq "setLatLong") {
      $DATA->{'LATITUDE-LONGITUDE'} = shift(@ARGV);
    } elsif ($commandString eq "setWindowState") {
      $DATA->{'WINDOW-STATE'} = shift(@ARGV);
      $DATA->{'WINDOW-STATE-UPDATED'} = time();
    } elsif ($commandString eq "setNestAccessToken") {
      $DATA->{'NEST-ACCESS-TOKEN'} = shift(@ARGV);
    } elsif ($commandString eq "setGrowlPeerList") {
      $DATA->{'GROWL-PEER-LIST'} = shift(@ARGV);
    } elsif ($commandString eq 'growlNotify') {
      growlNotify($CONFIG, $DATA, "Test Title", "Growl test message", "opened");
    } else {
      carp("Unknown command [" . $commandString . "]");
      displayHelp();
    }
    
  } else {
  
    validateConfigAndData($CONFIG, $DATA);
    my ($indoorTemperature, $hvacMode, $targetTemperatureLow, $targetTemperatureHigh) =
        getIndoorTemperatureAndTargetNest($CONFIG, $DATA, $userAgent);
        
    my $outdoorTemperature = getOutdoorTemperature($CONFIG, $DATA, $userAgent);
    
    print("indoorTemperature [$indoorTemperature], hvacMode [$hvacMode], "
        . "targetTemperatureLow [$targetTemperatureLow], "
        . "targetTemperatureHigh [$targetTemperatureHigh], "
        . "outdoorTemperature [$outdoorTemperature], "
        . "current windowState [$DATA->{'WINDOW-STATE'}]\n")
    if $v;
    
    $CONFIG->{'LOG-INDOOR-TEMPERATURE'} = $indoorTemperature;
    $CONFIG->{'LOG-TARGET-TEMPERATURE-LOW'} = $targetTemperatureLow;
    $CONFIG->{'LOG-TARGET-TEMPERATURE-HIGH'} = $targetTemperatureHigh;
    $CONFIG->{'LOG-OUTDOOR-TEMPERATURE'} = $outdoorTemperature;
    $CONFIG->{'LOG-HVAC-MODE'} = $hvacMode;
    
    if($hvacMode eq "heat-cool") {
      ## Trying to keep in a range, so just check if outdoor is in the range.
      if($outdoorTemperature > $targetTemperatureLow && $outdoorTemperature < $targetTemperatureHigh) {
        setWindowState($CONFIG, $DATA, $outdoorTemperature, $indoorTemperature, 'opened');
      } else {
        setWindowState($CONFIG, $DATA, $outdoorTemperature, $indoorTemperature, 'closed');
      }
    } elsif ($hvacMode eq "cool") {
      if($outdoorTemperature < $indoorTemperature) {
        print("Updating window state to open.\n") if $v;
        setWindowState($CONFIG, $DATA, $outdoorTemperature, $indoorTemperature, 'opened');
      } else {
        print("Updating window state to closed.\n") if $v;
        setWindowState($CONFIG, $DATA, $outdoorTemperature, $indoorTemperature, 'closed');
      }
      
    } else {
      confess("Not yet implemented dealing with hvac mode of: $hvacMode");
    }
  }
  printLogLine($CONFIG, $DATA) if $l;
  storeData($CONFIG, $DATA);
}

#### initialize(\%CONFIG) ###########################################

=head2 C<initialize(\%CONFIG)>

=over 4

=item Input:

=over 4

=item \%CONFIG

the configuration hashref.  Configuration settings that are hard coded
into the setup method.

=back

=item Output:

=over 4

=item \%DATA

the data hashref. Data is configuration that is stored in a local data
file.  The location and format of the file is environment dependent.

=back

=back

=pod

Initialize the environment by loading $CONFIG and $DATA.

=cut

#####################################################################
sub initialize($) {
  my $CONFIG = shift;
  my $DATA;

  ## Config is just setup in the file.
  $CONFIG->{'NEST-CLIENT-ID'} = '4ada2c61-9441-43aa-93cf-e497818dc5db';
  $CONFIG->{'NEST-AUTHORIZE-URL'} = 'https://home.nest.com/login/oauth2?client_id='
    . $CONFIG->{'NEST-CLIENT-ID'}
    . '&state=STATE';
  $CONFIG->{'NEST-ACCESS-TOKEN-URL'} = 'https://api.home.nest.com/oauth2/access_token?client_id='
    . $CONFIG->{'NEST-CLIENT-ID'}
    . '&code=AUTHORIZATION_CODE&client_secret='
    . 'NEST-CLIENT-SECRET'
    . '&grant_type=authorization_code';
      
  $CONFIG->{'NEST-DATA-URL'} = 'https://developer-api.nest.com/';
  $CONFIG->{'FORECAST-IO-URL'} = "https://api.forecast.io/forecast/APIKEY/LATLONG?exclude=minutely,hourly,daily,alerts,flags";
  
  ## How long should Growl notifications be paused after one is sent?
  $CONFIG->{'GROWL-QUIET-TIME'} = 0;
    
  if($^O eq "darwin") {
    $CONFIG->{'DATA-FILE-TYPE'} = 'plist';
    $CONFIG->{'DATA-FILE'} = File::HomeDir->my_home . '/Library/Preferences/net.chaosserver.OpenYourWindows.plist';
    
    # Get Script Directory
    my $scriptFilePath = (File::Spec->splitpath(File::Spec->canonpath($0)))[1];
    
    # Get Relative Icon Files and Cleanup with realpath
    $CONFIG->{'OPEN-ICON-FILE'} =
      realpath(File::Spec->catfile( $scriptFilePath, "..", "Resources", "Windows.Toggle.icns" ));

    $CONFIG->{'CLOSE-ICON-FILE'} =
      realpath(File::Spec->catfile( $scriptFilePath, "..", "Resources", "Windows.Toggle-closed.icns" ));
    
  } else {
    confess("Unknown OS [" . $^O . "], so don't know how to store the property files.");
  }

  ## Data is initialized from the file system.
  if ( -e $CONFIG->{'DATA-FILE'} ) {
    $DATA = loadData($CONFIG, $DATA);
  } else {
    $DATA = {};
  }
  
  $CONFIG->{'NEST-ACCESS-TOKEN-URL'} =~ s/NEST-CLIENT-SECRET/$DATA->{'NEST-CLIENT-SECRET'}/;
  $CONFIG->{'FORECAST-IO-URL'} =~ s/APIKEY/$DATA->{'FORECAST-API-KEY'}/;
  $CONFIG->{'FORECAST-IO-URL'} =~ s/LATLONG/$DATA->{'LATITUDE-LONGITUDE'}/;

  return $DATA;   
}

#### displayHelp() ##################################################

=head2 C<displayHelp()>

Display help to the system out.  Primarily used to display the various commands
that can be run.

=cut

#####################################################################
sub displayHelp() {
  print("Usage: Windows.Toggle [options] [command]\n");
  print("\n");
  print("Options\n");
  print("  -v                     verbose prints output to the standard display\n");
  print("  -l                     write out one log line\n");
  print("  -h                     display help\n");
  print("\n");
  print("Standard commands\n");
  print("  -none-                 passing no command will run the standard cycle of\n");
  print("                         checking temperatures and sending a grown notification\n");
  print("                         if the windows should be opened/closed\n");
  print("  setNestClientSecret    sets the Nest client secret for the application\n");
  print("  setForecastApiKey      sets the Forecast.io API key for the application\n");
  print("  setLatLong             sets the Latitude and Longitude to use for checking\n");
  print("                         the outside temprature\n");
  print("  setWindowState         sets the current state of the windows to opened/closed\n");
  print("  setNestAccessToken     sets the Nest access token to skip OAuth dance\n");
  print("  setGrowlPeerList       sets the peer list of where to send growl notifications.\n");
  print("                         should be host1:port,host2:port\n");
  print("  growlNotify            sends a test growl notification\n");
}


#### validateConfigAndData(\%CONFIG, \%DATA) ########################

=head2 C<validateConfigAndData(\%CONFIG, \%DATA)>

=over 4

=item Input:

=over 4

=item \%CONFIG
the configuration hashref.  Configuration settings that are hard coded
into the setup method.

=item \%DATA
the data hashref. Data is configuration that is stored in a local data
file.  The location and format of the file is environment dependent.

=back

=item Throws:

=over 4

=item Confesses if there is an missing data in settings that is required for standard
      operations

=back

=back

=pod

Validates the configuration and data to ensure that all settings are properly
configured.

=cut

#####################################################################
sub validateConfigAndData($$) {
  my $CONFIG = shift;
  my $DATA =shift;
  my $validationErrors = [];

  ## Validate all the settings exists.
  if(!exists $DATA->{'NEST-CLIENT-SECRET'} || length(trim($DATA->{'NEST-CLIENT-SECRET'})) == 0) {
  	push($validationErrors, "Missing config for [NEST-CLIENT-SECRET]. Set with command setNestClientSecret.");
  }
  if(!exists $DATA->{'FORECAST-API-KEY'} || length(trim($DATA->{'FORECAST-API-KEY'})) == 0) {
  	push($validationErrors, "Missing config for [FORECAST-API-KEY]. Set with command setForecastApiKey.");
  }
  if(!exists $DATA->{'LATITUDE-LONGITUDE'} || length(trim($DATA->{'LATITUDE-LONGITUDE'})) == 0) {
  	push($validationErrors, "Missing config for [LATITUDE-LONGITUDE]. Set with command setLatLong.");
  }
  
  my $errorCount = scalar(@{$validationErrors});
  if($errorCount > 0) {
    for my $validationError (@$validationErrors){
      print(STDERR "$validationError\n");
    }
    confess("Missing required configuration.  Please set configuration.");
  }
}


#### loadData(\%CONFIG) #############################################

=head2 C<loadData(\%CONFIG)>

=over 4

=item Input:

=over 4

=item \%CONFIG
the configuration hashref.  Configuration settings that are hard coded
into the setup method.

=back

=item Output:

=over 4

=item \%DATA
the data hashref. Data is configuration that is stored in a local data
file.  The location and format of the file is environment dependent.

=back

=back

=pod

Loads the data from the local store.

=cut

#####################################################################
sub loadData($) {
  my $CONFIG = shift;

  if($CONFIG->{'DATA-FILE-TYPE'} eq "plist") {
    open(my $fh, '<', $CONFIG->{'DATA-FILE'});
    my $plist = parse_plist_fh($fh);
    close($fh);
    
    return $plist->as_perl();
  } else {
    confess("Unknown data file type [" . $CONFIG->{'DATA-FILE-TYPE'} . "]");
  }
}

#### printLogLine(\%CONFIG, \%DATA) ####################################

=head2 C<printLogLine(\%CONFIG, \%DATA)>

=over 4

=item Input:

=over 4

=item \%CONFIG
the configuration hashref.  Configuration settings that are hard coded
into the setup method.

=item \%DATA
the data hashref. Data is configuration that is stored in a local data
file.  The location and format of the file is environment dependent.

=back

=back

=pod

Displays a single line to describe the before and after state for
logging purposes.

=cut

#####################################################################
sub printLogLine($$) {
  my $CONFIG = shift;
  my $DATA = shift;
  
  print(sprintf("[%s]: Window State Before [%s] Updated [%s], After [%s], "
      . "Indoor Temp [%s], Outdoor Temp [%s], "
      . "Target Temp Low [%s], Target Temp High [%s], HVAC mode [%s], "
      . "Within Quiet [%s], Grown Notify [%s] \n",
    strftime("%m/%d/%Y %H:%M:%S",localtime(time())),
  	$CONFIG->{'LOG-WINDOW-STATE-BEFORE'},
  	strftime("%m/%d/%Y %H:%M:%S",localtime($CONFIG->{'LOG-WINDOW-STATE-UPDATED-BEFORE'})),
  	$DATA->{'WINDOW-STATE'},
  	$CONFIG->{'LOG-INDOOR-TEMPERATURE'},
  	$CONFIG->{'LOG-OUTDOOR-TEMPERATURE'},
  	$CONFIG->{'LOG-TARGET-TEMPERATURE-LOW'},
  	$CONFIG->{'LOG-TARGET-TEMPERATURE-HIGH'},
  	$CONFIG->{'LOG-HVAC-MODE'},
  	$CONFIG->{"LOG-WITHIN-QUIET-TIME"},
  	$CONFIG->{"LOG-GROWL-NOTIFY"}
  ));
}

#### storeData(\%CONFIG, \%DATA) ####################################

=head2 C<storeData(\%CONFIG, \%DATA)>

=over 4

=item Input:

=over 4

=item \%CONFIG
the configuration hashref.  Configuration settings that are hard coded
into the setup method.

=item \%DATA
the data hashref. Data is configuration that is stored in a local data
file.  The location and format of the file is environment dependent.

=back

=back

=pod

Stores the values of $DATA into a local file.  The location and format of the file is
environment dependent.

=cut

#####################################################################
sub storeData($$) {
  my $CONFIG = shift;
  my $DATA = shift;

  if($CONFIG->{'DATA-FILE-TYPE'} eq "plist") {
    my $plist = create_from_hash($DATA);
    open(my $fh, '>', $CONFIG->{'DATA-FILE'});
    print($fh $plist);
    close($fh);
  } else {
    confess("Unknown data file type [" . $CONFIG->{'DATA-FILE-TYPE'} . "]");
  }
}

#### getIndoorTemperatureAndTargetNest(\%CONFIG, \%DATA, $userAgent)

=head2 C<getIndoorTemperatureAndTargetNest(\%CONFIG, \%DATA, $userAgent)>

=over 4

=item Input:

=over 4

=item \%CONFIG
the configuration hashref.  Configuration settings that are hard coded
into the setup method.

=item \%DATA
the data hashref. Data is configuration that is stored in a local data
file.  The location and format of the file is environment dependent.

=item $userAgent
A LWP::UserAgent object used to make REST API calls to Nest

=back

=item Output:

=over 4

=item $indoorTemperature
the current indoor temperature

=item $hvacMode
hvac mode can be heat, cool, heat-cool

=item $targetTemperatureLow
the target low temperature for cool or heat-cool

=item $targetTemperatureHigh
the target high temperature for heat or heat-cool

=back

=back

=pod

Makes and API call to the Nest API to get back the current settings from the thermostat.

=cut

#####################################################################
sub getIndoorTemperatureAndTargetNest($$$) {
  my $CONFIG = shift;
  my $DATA = shift;
  my $userAgent = shift;
  
  authenticateNest($CONFIG, $DATA, $userAgent);
  
  my $nestDataUrl = URI->new($CONFIG->{'NEST-DATA-URL'});
  $nestDataUrl->query_form(auth => $DATA->{'NEST-ACCESS-TOKEN'});
  
  my $response = $userAgent->get( 
    $nestDataUrl,
	'Accept'   => 'application/json'
  );
  
  if($response->code() == 200) {
    my $dataJson = decode_json( $response->decoded_content() );
    
    # Get the first thermostat.  If there are no thermostats or multiple just throw
    # and error for now.
    my @thermostatsNames = keys $dataJson->{"devices"}->{"thermostats"};
    my $thermostatCount = scalar(@thermostatsNames);
    
    if($thermostatCount == 1) {
      # Need to take three different modes into account.
      # 1. Cooling - should be colder than the indoor temperature
      # 2. Heating - should be hotter than the indoor temperature
      # 3. Range (heat-cool) - should be in between the desired range
      
      my $thermostatId = $thermostatsNames[0];
      my $indoorTemperature = $dataJson->{"devices"}->{"thermostats"}->{$thermostatId}->{"ambient_temperature_f"};
      my $hvacMode = $dataJson->{"devices"}->{"thermostats"}->{$thermostatId}->{"hvac_mode"};
      my $targetTemperatureLow = $dataJson->{"devices"}->{"thermostats"}->{$thermostatId}->{"target_temperature_low_f"};
      my $targetTemperatureHigh = $dataJson->{"devices"}->{"thermostats"}->{$thermostatId}->{"target_temperature_high_f"};
            
      return ($indoorTemperature, $hvacMode, $targetTemperatureLow, $targetTemperatureHigh);
    } else {
      confess("Only works with one thermostat.  Result is showing [" . $thermostatCount . "]");
    }    
  } else {
    confess("Failed to get data from Nest [" . $nestDataUrl . "] with response of:\n"
			. $response->as_string());
  }  
}

#### authenticateNest(\%CONFIG, \%DATA, $userAgent) #################

=head2 C<authenticateNest(\%CONFIG, \%DATA, $userAgent)>

=over 4

=item Input:

=over 4

=item \%CONFIG
the configuration hashref.  Configuration settings that are hard coded
into the setup method.

=item \%DATA
the data hashref. Data is configuration that is stored in a local data
file.  The location and format of the file is environment dependent.

=item $userAgent
A LWP::UserAgent object used to make REST API calls to Nest

=back

=back

=pod

Makes and API call to the Nest API to get back the current settings from the thermostat.

=cut

#####################################################################
sub authenticateNest($$$) {
  my $CONFIG = shift;
  my $DATA = shift;
  my $userAgent = shift;

  # If the Nest Access Token Doesn't Exist do OAuth
  
  # OAuth Step #1 is to go the Authorize URL.  Using in oob (out-of-band) mode
  # requires the user to get an authorization code.
  if(!exists $DATA->{'NEST-ACCESS-TOKEN'}) {
    my $openBrowserReply = open_browser($CONFIG->{'NEST-AUTHORIZE-URL'}); 
    my $accessTokenUrl = $CONFIG->{'NEST-ACCESS-TOKEN-URL'};
    
    if (! defined($openBrowserReply) ) {
      print("Not able to open the browser, please direct your web browser to the following URL:\n");
      print($CONFIG->{'NEST-AUTHORIZE-URL'} . "\n");
      print("\n");
    }

    print("Enter the authorization code provide by nest: ");
    chomp(my $authorizationCode = <>);

    undef $openBrowserReply;
    $accessTokenUrl =~ s/AUTHORIZATION_CODE/$authorizationCode/;

	my $response = $userAgent->post($accessTokenUrl);
	if($response->code() == 200) {
	  my $dataJson = decode_json( $response->decoded_content() );
	  $DATA->{'NEST-ACCESS-TOKEN'} = $dataJson->{"access_token"};
	} else {
	  confess("Failed to get a valid oauth access token with response of:\n"
			. $response->as_string());
	}
  }
}

sub getOutdoorTemperature($$$) {
  my $CONFIG = shift;
  my $DATA = shift;
  my $userAgent = shift;
  my $forecastIoUrl = $CONFIG->{'FORECAST-IO-URL'};
  
  my $response = $userAgent->get( 
    $forecastIoUrl,
	'Accept'   => 'application/json'
  );
  
  if($response->code() == 200) {
    my $dataJson = decode_json( $response->decoded_content() );
    my $outdoorTemperature = $dataJson->{'currently'}->{'temperature'};

    return $outdoorTemperature;
  } else {
    confess("Failed to get a valid Forecast IO response:\n"
	    . $response->as_string());
  }
  
  ## https://api.forecast.io/forecast/058e5e4407119ab672a888370c36f6a4/38.6332990,-121.3346720
}

sub setWindowState($$$$$) {
  my $CONFIG = shift;
  my $DATA = shift;
  my $outdoorTemperature = shift;
  my $indoorTemperature = shift;
  my $newWindowState = shift;
  my $currentTime = time();
  my $existingWindowState = $DATA->{'WINDOW-STATE'};
  
  if(!exists $DATA->{'WINDOW-STATE'} || length(trim($DATA->{'WINDOW-STATE'})) == 0) {
    $DATA->{'WINDOW-STATE'} = 'closed';
    $DATA->{'WINDOW-STATE-UPDATED'} = $currentTime;
  }

  print("existingWindowState [$existingWindowState], "
      . "newWindowState [$newWindowState]\n")
    if $v;

  ## Only update if it's been more than 30 minutes (1800 seconds)
  if(($currentTime - $DATA->{'WINDOW-STATE-UPDATED'}) > $CONFIG->{'GROWL-QUIET-TIME'}) {
    $CONFIG->{"LOG-WITHIN-QUIET-TIME"} = "false";
    my $message = "It's $indoorTemperature insides and $outdoorTemperature outside.";
    if($existingWindowState eq "opened" && $newWindowState ne "opened") {
      $CONFIG->{"LOG-GROWL-NOTIFY"} = "close";
      growlNotify($CONFIG, $DATA, "Close the windows.", $message, "closed");
      $DATA->{'WINDOW-STATE'} = 'closed';
      $DATA->{'WINDOW-STATE-UPDATED'} = time();
    } elsif($existingWindowState eq "closed" && $newWindowState ne "closed") {
      $CONFIG->{"LOG-GROWL-NOTIFY"} = "open";
      growlNotify($CONFIG, $DATA, "Open the windows.", $message, "opened");
      $DATA->{'WINDOW-STATE'} = 'opened';
      $DATA->{'WINDOW-STATE-UPDATED'} = time();
    }
  } else {
  	$CONFIG->{"LOG-WITHIN-QUIET-TIME"} = "true";
    print("Last update was too recent, silencing this one.\n") if $v;
  }
}

sub growlNotify($$$$) {
  my $CONFIG = shift;
  my $DATA = shift;
  my $title = shift;
  my $message = shift;
  my $icon = shift;  
  my $iconPath = $CONFIG->{'OPEN-ICON-FILE'};
  my $growlPeerList = $DATA->{'GROWL-PEER-LIST'};
  
  if(!exists $DATA->{'GROWL-PEER-LIST'} || length(trim($DATA->{'GROWL-PEER-LIST'})) == 0) {
    $growlPeerList = "localhost:23053";
  }
  
  if($icon eq "closed") {
    $iconPath = $CONFIG->{'CLOSE-ICON-FILE'};
  }
  
  my @growlPeerListArray = split(',', $growlPeerList);
  for my $growlPeer (@growlPeerListArray) {
    my ($growlPeerHost, $growlPeerPort, $growlPassword) = split(':', $growlPeer);
    if(!defined $growlPeerPort) {
      $growlPeerPort = 23053;
    }
    if(!defined $growlPassword) {
      $growlPassword = '';
    }

	eval {
      print("Creating a new Growl Object for $growlPeerHost") if $v;
      my $growl = Growl::GNTP->new(
        AppName => "Windows.Toggle",
        PeerHost => $growlPeerHost,
        PeerPort => $growlPeerPort,
        Password => $growlPassword,
        Icon => $iconPath,
        Debug => $v);
    
	  print("Registering a new Growl Command") if $v;
      $growl->register([{
        Name => 'OPEN_WINDOW_STATUS',
        DisplayName => 'Windows.Toggle'
      }]);
    
	  print("Notifying a new Growl Command") if $v;
      $growl->notify(
        Event => 'OPEN_WINDOW_STATUS',
        Title => $title,
        Message => $message,
        Icon => $iconPath
      );
    };
    if($@) {
      print("Failed to notify a Growl Command: $@") if $v;
    }
  }  
}

###
## Get Temperature Function to Get the Tempurature of the House
## 1. Nest Thermostat
## 2. Netatmo Weather
###

eval {
  main(@ARGV);
};
if ($@) {
  die $@;
};